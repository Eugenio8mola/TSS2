# SPDX-License-Identifier: BSD-2-Clause


class MyPyTCTI(object):
    def __init__(self, args: str):
        print(f"PyTCTI ARGS: {args}")
        if args == "init":
            raise RuntimeError(f"Failing in {args}")

        self._fail_fn = args

    @property
    def magic(self):
        if self._fail_fn == "magic":
            raise RuntimeError("Failing in magic")
        # Optional attribute
        return 42

    def receive(self, timeout: int) -> bytes:
        if self._fail_fn == "receive":
            raise RuntimeError("Failing in receive")

        data = b"\x80\x01\x00\x00\x01\x83\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00.\x00\x00\x01\x002.0\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x01\x02\x00\x00\x00\xa4\x00\x00\x01\x03\x00\x00\x00K\x00\x00\x01\x04\x00\x00\x07\xe5\x00\x00\x01\x05IBM\x00\x00\x00\x01\x06SW  \x00\x00\x01\x07 TPM\x00\x00\x01\x08\x00\x00\x00\x00\x00\x00\x01\t\x00\x00\x00\x00\x00\x00\x01\n\x00\x00\x00\x01\x00\x00\x01\x0b \x19\x10#\x00\x00\x01\x0c\x00\x1666\x00\x00\x01\r\x00\x00\x04\x00\x00\x00\x01\x0e\x00\x00\x00\x03\x00\x00\x01\x0f\x00\x00\x00\x07\x00\x00\x01\x10\x00\x00\x00\x03\x00\x00\x01\x11\x00\x00\x00@\x00\x00\x01\x12\x00\x00\x00\x18\x00\x00\x01\x13\x00\x00\x00\x03\x00\x00\x01\x14\xff\xff\xff\xff\x00\x00\x01\x16\x00\x00\x00\x00\x00\x00\x01\x17\x00\x00\x08\x00\x00\x00\x01\x18\x00\x00\x00\x06\x00\x00\x01\x19\x00\x00\x10\x00\x00\x00\x01\x1a\x00\x00\x00\r\x00\x00\x01\x1b\x00\x00\x00\x06\x00\x00\x01\x1c\x00\x00\x01\x00\x00\x00\x01\x1d\x00\x00\x00\xff\x00\x00\x01\x1e\x00\x00\x10\x00\x00\x00\x01\x1f\x00\x00\x10\x00\x00\x00\x01 \x00\x00\x00@\x00\x00\x01!\x00\x00\n\x84\x00\x00\x01\"\x00\x00\x01\x94\x00\x00\x01#2.0\x00\x00\x00\x01$\x00\x00\x00\x00\x00\x00\x01%\x00\x00\x00\xa4\x00\x00\x01&\x00\x00\x00K\x00\x00\x01'\x00\x00\x07\xe5\x00\x00\x01(\x00\x00\x00\x80\x00\x00\x01)\x00\x00\x00n\x00\x00\x01*\x00\x00\x00n\x00\x00\x01+\x00\x00\x00\x00\x00\x00\x01,\x00\x00\x04\x00\x00\x00\x01-\x00\x00\x00\x00\x00\x00\x01.\x00\x00\x04\x00"
        return data

    def transmit(self, data: bytes):
        if self._fail_fn == "transmit":
            raise RuntimeError("Failing in transmit")

    def make_sticky(self, handle:int, sticky: bool):
        if self._fail_fn == "make_sticky":
            raise RuntimeError("Failing in make_sticky")
        return handle + int(sticky)

    def set_locality(self, locality: int):
        if self._fail_fn == "set_locality":
            raise RuntimeError("Failing in set_locality")
        if locality != 42:
            raise ValueError("Expected locality to be 42")

def tcti_init(args: str) -> MyPyTCTI:
    return MyPyTCTI(args)
